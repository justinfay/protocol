        // await controllerContract.connect(timelockSigner).approveStrategy(assetAddr,deployedStrat.address);
        // await controllerContract.connect(strategistSigner).setStrategy(assetAddr,deployedStrat.address);
        // await controllerContract.connect(strategistSigner).setGlobe(assetAddr,snowglobeAddr);
        // strategyContract = await ethers.getContractAt("StrategyBenqiWbtc", strategyAddr,  governanceSigner);
        // globeContract = await ethers.getContractAt("SnowGlobeBenqiWbtc", snowglobeAddr,  governanceSigner);

        const {doFoldingTest} = require("../folding-test");

        const assetAddr = "";
        const snowglobeAddr = "";
        const strategyAddr= "";
        const globeABI = [];
        const stratABI = [];  

        const txnAmt = "";
        
        describe("StrategyBenqiWbtc", () => {
                const stratFactory = await ethers.getContractFactory("StrategyBenqiWbtc");
                const deployedStrat = await stratFactory.deploy(governanceAddr, strategistAddr, controllerAddr, timelockAddr);

                const globeFactory = await ethers.getContractFactory("SnowGlobeBenqiWbtc");
                const deployedGlobe = await globeFactory.deploy(assetAddr, governanceAddr, timelockAddr, controllerAddr);

                
                doFoldingTest("WBTC.e",assetAddr,snowglobeAddr,strategyAddr,globeABI,stratABI,txnAmt);

        });